#!/bin/python
"""

## Genotype preparation for Additive testing within SKAT ##
Secondary analysis for recessive SKAT.

For each gene,
* obtain the variants used to devise the pseudo-markers
* assign weights based on {pLoF:4, damaging missense:2, other_missense:1}
* generate SAIGE or Regenie annotation files

Then testing should be as previously, this time using the raw genotypes.

###################
GK - Jan 31st, 2025
"""
import pandas as pd
pd.options.mode.copy_on_write = True
import argparse
from utils_new_rec_enc import write_saige_file, set_class_weights

weights_addSkat = {
    'synonymous': 0.5,
    'other_missense': 1,
    'damaging_missense': 2,
    'pLoF': 4,
}

def get_geneID_from_markerID(x, gene_map):
    return gene_map[x.rsplit(":", 1)[0]]

parser = argparse.ArgumentParser(description="Genotype preparation for Additive testing for ReSKAT.")

parser.add_argument("--marker_info", "-m", help="file with marker info generated by ReSKAT prep step", required=True, type=str)
parser.add_argument("--gene_index", "-g", help="file with gene ID mapping", required=True, type=str)
parser.add_argument("--out", "-o", help="prefix for any output", required=True, type=str)
args = parser.parse_args()

df_input = pd.read_csv( args.marker_info, header=None, sep='\t')
df_input.columns = ['markerID', 'variants', 'worst_consq', 'count','PAF']

geneID_map = pd.read_csv( args.gene_index, sep='\s+')
geneID_map = geneID_map.set_index('GeneID')['Gene']

# obtain gene IDs from pseudo-IDs
df_input['gene'] = df_input['markerID'].apply(lambda x: get_geneID_from_markerID( x, geneID_map ))
print(f"Input consists of {len(df_input)} pseudo-markers and {len(df_input.gene.unique())} genes.")

# break compound-het markers to two separate markers
df_markers_split = pd.DataFrame()
for _, row in df_input.iterrows():
    variants = row.variants.split(';')
    if len(variants) == 2:  # Only process compound-het markers
        # Create two new rows, one for each variant
        df_markers_split = pd.concat([df_markers_split, pd.DataFrame({
            'Gene': row.gene,
            'SNP': variants,
            'Consq': row.worst_consq.split('|'),
        })])
    else:
        # Keep single variant markers as is
        df_markers_split = pd.concat([df_markers_split, pd.DataFrame({
            'Gene': row.gene,
            'SNP': [row.variants],
            'Consq': [row.worst_consq],     
        })])

df_markers_split.reset_index(drop=True, inplace=True)
print(f"Found info for {len(df_markers_split)} variants.")

# drop duplicated lines (occuring from biallelic variants)
df_markers_split = df_markers_split[ ~df_markers_split.duplicated() ]

# Obtain weights based on consequence
df_markers_split['Weight'] = df_markers_split['Consq'].apply(set_class_weights, new_weights=weights_addSkat)

# write annotation file for SAIGE
write_saige_file(df_markers_split, args.out + '.AddSKAT.groupFile.txt', col_consq='Consq', col_snp='SNP')

print("All done! Proceed to testing with SAIGE.")
# end-of-script
